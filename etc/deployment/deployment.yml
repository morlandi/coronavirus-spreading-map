
- hosts: servers
  gather_facts: True
  vars_files:
      - vars.yml

  #
  # Tasks
  #

  tasks:

      - name: Show ansible version
        debug:
            msg: "ansible_version: {{ansible_version.major}}"

      - name: Check ansible version
        fail:
            msg: "This playbook requires Ansible 2.x or greater."
        when: ansible_version.major < 2

      #
      # User
      #

      - name: Add group
        become: true
        group:
            name: "{{usergroup}}"

      - name: Add user
        become: true
        user:
            name: "{{username}}"
            group: "{{usergroup}}"
            home: "{{home}}"
            shell: /bin/bash
            generate_ssh_key: no
            state: present
            #password: "{{user_password}}"

      - name: Create standard folders
        become: true
        file:
            path: "{{item}}"
            state: directory
            owner: "{{username}}"
            group: "{{usergroup}}"
        with_items:
          - "{{home}}/logs"
          - "{{home}}/run"

      - name: Create project folder with restricted permissions
        become: true
        file:
            path: "{{home}}/{{project_name}}"
            state: directory
            owner: "{{username}}"
            group: "{{usergroup}}"
            mode: 0750

      #
      # Project
      #

      - name: Pull sources from the repository.
        become: true
        become_user: "{{username}}"
        git:
            repo: "{{project.repo}}"
            dest: "{{project.website_home}}/"
            version: "{{version}}"
            accept_hostkey: True
            force: True
        notify:
            - Restart Nginx
            - Restart supervised services

      - name: Remove pyc files
        become: true
        become_user: "{{username}}"
        command: find . \( -name \*.pyc -o -name \*.pyo -o -name __pycache__ \) -prune -exec rm -rf {} +
        args:
          chdir: "{{project.website_home}}"
        tags: quick

      - name: Create local settings file
        become: true
        become_user: "{{username}}"
        template:
            src: local_settings.py
            dest: "{{project.settings_folder}}/local_settings.py"
            force: True

      - name: Check if virtualenv exists
        stat:
            path: "{{project.virtualenv}}/bin/python3"
        register: python3_executable

      - name: Create the virtualenv
        become: true
        become_user: "{{username}}"
        command: python3 -m venv ./python
        args:
          chdir: "{{project.root}}"
        when: python3_executable.stat.exists == False

      - name: Upgrade the virtualenv
        become: true
        become_user: "{{username}}"
        pip:
            virtualenv={{project.virtualenv}}
            requirements={{project.website_home}}/requirements/production.txt
        #ignore_errors: yes

      - name: Install Nginx configuration file
        become: true
        template:
            src: nginx.conf
            dest: /etc/nginx/sites-available/{{project_instance}}.conf
        notify:
            - Restart Nginx

      - name: Enable nginx configuration file
        become: true
        file:
            src: /etc/nginx/sites-available/{{project_instance}}.conf
            dest: /etc/nginx/sites-enabled/{{project_instance}}.conf
            state: link
        notify:
            - Restart Nginx

      - name: Create Supervisord configuration file
        become: true
        template:
            src: supervisor.conf
            dest: /etc/supervisor/conf.d/{{project_instance}}.conf
        notify:
          - Add supervised services
          - Restart Nginx
        # when:
        #   not skip_supervisor

      - name: Create logrotate configuration file
        become: true
        template:
            src: logrotate.conf
            dest: "/etc/logrotate.d/{{project_instance}}"

  #
  # Handlers
  #

  handlers:

      - name: Restart Nginx
        become: true
        service:
            name: nginx
            state: restarted

      - name: Reload Nginx
        become: true
        service:
            name: nginx
            state: reloaded

      # When state = present,
      #     the module will call supervisorctl reread then supervisorctl add if the program/group does not exist
      - name: Add supervised services
        become: true
        # supervisorctl:
        #     name: "{{project.supervised_services}}"
        #     state: present
        command: supervisorctl reread
        notify:
            - Restart supervised services

      # When state = restarted,
      #     the module will call supervisorctl update then call supervisorctl restart.
      - name: Restart supervised services
        become: true
        supervisorctl:
            name: "{{item}}"
            state: restarted
        with_items:
            "{{project.supervised_services}}"
